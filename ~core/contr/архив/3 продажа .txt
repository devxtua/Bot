<?php
$start = microtime(true);  
//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
echo "BUCKS 500$/dey ПРОДАЖА <br/>";


//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
echo "BUCKS (v5) ЗАКУПКА<br/>";
//запустить тестовою покупку $orderBUY == 0
$settings['order_Test'] = $order_Test = '1';


//ВКЛЮЧИТЬ создания ордеров покупку
$settings['orderBUY'] = $orderBUY = 0;


//минимальное количество сделок за 24 час
$settings['countTrends'] = $countTrends= 1000; 
// максимальный % изминения цены за 24 час
$settings['priceChangePercent'] = $priceChangePercent= 5; 


//стартовый лимит закупки
$settings['trade_limit'] = $trade_limit = 50;


//НАСТРОЙКИ БЕРЕМ С ПРОДАЖИ
//Увеличить моментальную потерю маржи
$settings['addPrice_loss_p'] = $addPrice_loss_p = 0.1;
//потеря маржи % при Stop Loss
$settings['lossМargin_p'] = $lossМargin_p = -1;


//КОНТРОЛЬНЫЙ интервал 1m/3m/5m/15m/30m/1h/2h/4h/6h/8h/12h/1d/3d/1w/1M
$settings['IntervalControl'] = $IntervalControl = '1h';
//количество свечей
$settings['countIntervalControl'] = $countIntervalControl = 24;

//РАБОЧИЙ интервал 1m/3m/5m/15m/30m/1h/2h/4h/6h/8h/12h/1d/3d/1w/1M
$settings['IntervalBUY'] = $IntervalBUY = '1m';
//количество свечей
$settings['countIntervalBUY'] = $countIntervalBUY = 100;

//минимальный процент  Волонтильность за последние countKlines свечей
$settings['BUYcontrolChangePrice_p'] = $BUYcontrolChangePrice_p = 1;
//процент контроля роста цены от минимальной для покупки
$settings['controltopPrice_p'] = $controltopPrice_p = 0.3;


//Определяем базове валют
$base['BTC']= array('minBalans'=>0.5, 'minPriceBuy'=>0.00000100);
$base['USDT']= array('minBalans'=>1000, 'minPriceBuy'=>0.00000100);
$base['BNB']= array('minBalans'=>10, 'minPriceBuy'=>0.00000100);
$base['ETH']= array('minBalans'=>10, 'minPriceBuy'=>0.00000100);
$base['TRX']= array('minBalans'=>100, 'minPriceBuy'=>0.00000100);
$base['XRP']= array('minBalans'=>100, 'minPriceBuy'=>0.00000100);
$base['EUR']= array('minBalans'=>1000, 'minPriceBuy'=>0.00000100);




//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
header('refresh: 1');
//Устанавливаем настройки времени
// echo "max_execution_time ", ini_get('max_execution_time'), "<br />";
ini_set('max_execution_time', 1000);    //  одно и тоже что set_time_limit(6000);
// echo "max_execution_time ", ini_get('max_execution_time'), "<br />";

// ob_implicit_flush(1);     
// ob_start();
// ob_get_contents();
// ob_get_clean();
// ob_end_flush();


//Создаем класс
$Bin = new binance();
//Проверяем торговый статус API аккаунта
// $apiTradingStatus= $Bin->apiTradingStatus(array());
// $Bin->show($apiTradingStatus);
// die();


$filaccountBalance = 'E:\binance\accountBalance_'.date("m.d.y").'.txt';
$accountBalanceOld = $Bin->readFile($filaccountBalance);
// $Bin->show($accountBalanceOld);



$filarchiveorderSELL = 'E:\binance\archiveorderSELL_'.date("m.d.y").'.txt';

$sum =$n= 0;
$archivassetSum = $assetBUN =array();
if ($archiveorderSELL = $Bin->readFile($filarchiveorderSELL)) { 
    array_reverse($archiveorderSELL);
    // $asset = array();
    // foreach ($archiveorderSELL as $key => $value) {
    //     if (!in_array($value['asset'], $asset)) {
    //         $asset[]=$value['asset'];
    //         $archivasset = $Bin->multiSearch($archiveorderSELL, array('asset' => $value['asset']));
    //         // $Bin->showArrayTable($archivasset);
    //         $nasset = $sumasset= 0;
    //         $nM = $sM = $sPBTC = 0;
    //         $nP = $sP= 0;
    //         foreach ($archivasset as $keyasset => $valueasset) {
    //             if ($valueasset['margin']>0) {
    //                 $nP ++;
    //                 $sP += $valueasset['margin'];
    //                 $sPBTC += $valueasset['marginBTC'];
    //                 $sPUSD += $valueasset['marginUSD'];
    //             }else{
    //                 $nM ++;
    //                 $sM += $valueasset['margin'];
    //                 $sMBTC += $valueasset['marginBTC'];
    //                 $sMUSD += $valueasset['marginUSD'];
    //             }
    //             $nasset++;
    //             $sumasset += $valueasset['margin'];
    //             $sumassetBTC += $valueasset['marginBTC'];
    //             $sumassetUSD += $valueasset['marginUSD'];  

    //         }
    //         $archivassetSum[$value['asset']]['asset'] = $value['asset'];

    //         $archivassetSum[$value['asset']]['sP'] = $sP;
    //         $archivassetSum[$value['asset']]['sPBTC'] = $sPBTC;
    //         $archivassetSum[$value['asset']]['sPUSD'] = $sPUSD;
    //         $archivassetSum[$value['asset']]['nP'] = $nP;

    //         $archivassetSum[$value['asset']]['sM'] = $sM;
    //         $archivassetSum[$value['asset']]['sMBTC'] = $sMBTC;
    //         $archivassetSum[$value['asset']]['sMUSD'] = $sMUSD;
    //         $archivassetSum[$value['asset']]['nM'] = $nM;

    //         $archivassetSum[$value['asset']]['sumasset'] = $sumasset;
    //         $archivassetSum[$value['asset']]['sumassetBTC'] = $sumassetBTC;
    //         $archivassetSum[$value['asset']]['sumassetUSD'] = $sumassetUSD;



    //         $archivassetSum[$value['asset']]['nasset'] = $nasset;
    //         $archivassetSum[$value['asset']]['BUN'] = '';

    //         if ($archivassetSum[$value['asset']]['sP']<-1*$archivassetSum[$value['asset']]['sM']) {
    //             // $archivassetSum[$value['asset']]['BUN'] = $value['asset'];
    //         }


    //     }
    //     $n++;
    //     $sum += $value['margin'];
    //     $sumBTC += $value['marginBTC'];
    //     $sumUSD += $value['marginUSD'];





    // }
}
usort($archivassetSum, function($a, $b) {
    return $b['sumasset'] - $a['sumasset'];
});
// $Bin->showArrayTable($archivassetSum);

$assetBUN = array_values(array_unique(array_column($archivassetSum, 'BUN')));
// $Bin->show($assetBUN);




// <font size="5" color="red" face="Arial">П</font>
//************************ОБЩИЕ ДАНЫЕ БИРЖИ (загружаем или читаем с файла)**************
$filetradeFeeKom = 'E:\binance\tradeFeeKom.txt';
$fileexchangeInfo = 'E:\binance\exchangeInfo.txt';
if(time()-filemtime($filetradeFeeKom) > 3600 || time()-filemtime($fileexchangeInfo) > 3600){
    //Даные в файле устарели УДАЛЯЕМ 
    unlink($filetradeFeeKom);
    unlink($fileexchangeInfo);

    //Получаем актуальную информацию
    $tradeFeeKom= $Bin->tradeFeeKom();      //О комисиях
    $exchangeInfo = $Bin->exchangeInfo();   //Правила биржевой торговли и символьная информация+

    //записиваем даные в файл
    $Bin->saveFile($tradeFeeKom, $filetradeFeeKom);
    $Bin->saveFile($exchangeInfo, $fileexchangeInfo);

    $time = microtime(true) - $start;
    echo 'Файлы ОБНОВЛЕНЫ. время: '.round($time, 4).' сек.<br/>';
}else{    
    //Даные в файле актуальны читаем
    $tradeFeeKom = $Bin->readFile($filetradeFeeKom);
    $exchangeInfo = $Bin->readFile($fileexchangeInfo);

    $time = microtime(true) - $start;
    // echo 'Файлы прочитаны. время: '.round($time, 4).' сек.<br/>';
}

//Смотрим
// $Bin->show($tradeFeeKom);
// $Bin->show($exchangeInfo);
// $Bin->show($ticker24hr);


//Получение ПОСЛЕДНИХ ДАНЫХ  symbol-----------------------------

//Получить изминения за 24 часса
$ticker24hr = $Bin->ticker24hr();
// $Bin->show($ticker24hr[0]);

//Получить свободный баланс АКТИВОВ
$accountBalance= $Bin->accountBalance($ticker24hr, $base);
// $Bin->showArrayTable($accountBalance);

//Читаем файл истории стаканов
$filehistoryKlines = 'E:\binance\V5historyKlines.txt';
if (!$historyKlines = $Bin->readFile($filehistoryKlines)) $historyKlines = array();
// $Bin->showArrayTable($historyKlines);



//Читаем файл архива покупок
$filehistoryBUY = 'E:\binance\V5historyBUY .txt';
if (!$historyBUY  = $Bin->readFile($filehistoryBUY )) $historyBUY  = array();
    foreach ($historyBUY as $key => $value) {
      // if (!in_array($key, array_column($accountBalance, 'asset'))) {
      //     unset($historyBUY[$key]);
      //     continue;
      // }      
      $kurs = $Bin->kurs($value['base'], $ticker24hr);
      $historyBUY[$key]['kursUSD'] = $kurs['kursUSD'];
      $historyBUY[$key]['correctionUSD']= bcdiv($value['BUYkursUSD'], $kurs['kursUSD'], 8);
      $historyBUY[$key]['kursBTC'] = $kurs['kursBTC'];
      $historyBUY[$key]['correctionBTC']= bcdiv($value['BUYkursBTC'], $kurs['kursBTC'], 8);

    }
$Bin->showArrayTable($historyBUY);
die();
//Заполнение Цены закупки************************************************************************************
    foreach ($accountBalance as $key => $valueAccoun) {
        break;
        // echo $valueAccoun['asset'],"<br/>";
        //Исключаем если asset пусто
        if (!isset($valueAccoun['asset'])) continue;
        //Исключаем  asset USDT
        if ($valueAccoun['asset']=='USDT') continue;

        if (isset($accountBalanceOld[$valueAccoun['asset']]['BUYSymbol'])) {
            $accountBalance[$valueAccoun['asset']]['BUYSymbol'] = $accountBalanceOld[$valueAccoun['asset']]['BUYSymbol'];
            $accountBalance[$valueAccoun['asset']]['side'] = $accountBalanceOld[$valueAccoun['asset']]['side'];
            $accountBalance[$valueAccoun['asset']]['BUYTime'] = $accountBalanceOld[$valueAccoun['asset']]['BUYTime'];
            $accountBalance[$valueAccoun['asset']]['BUYPrice'] = $accountBalanceOld[$valueAccoun['asset']]['BUYPrice'];
            // $accountBalance[$valueAccoun['asset']]['executedQty'] = $accountBalanceOld[$valueAccoun['asset']]['executedQty'];
            // $accountBalance[$valueAccoun['asset']]['BUYPriceBTC'] = $accountBalanceOld[$valueAccoun['asset']]['BUYPriceBTC'];
            // $accountBalance[$valueAccoun['asset']]['BUYPriceUSD'] = $accountBalanceOld[$valueAccoun['asset']]['BUYPriceUSD'];        
            $accountBalance[$valueAccoun['asset']]['update']= 'BalanceOld';
        }elseif(isset($SymbolBUY[$accountBalanceOld[$valueAccoun['asset']]['BUYSymbol']])){
            $order = $SymbolBUY[$accountBalanceOld[$valueAccoun['asset']]['BUYSymbol']];
            $accountBalance[$valueAccoun['asset']]['BUYSymbol'] = $order['symbol'];
            $accountBalance[$valueAccoun['asset']]['side'] = $order['side'];
            $accountBalance[$valueAccoun['asset']]['BUYTime'] = $order['transactTime'];
            $accountBalance[$valueAccoun['asset']]['BUYPrice'] = $order['cummulativeQuoteQty']/$order['executedQty'] ;
            // $accountBalance[$valueAccoun['asset']]['executedQty'] = $order['executedQty'];
            // $accountBalance[$valueAccoun['asset']]['BUYPriceBTC'] = $accountBalance[$valueAccoun['asset']]['BUYPrice'] * $order['kurs']['kursBTC'];
            // $accountBalance[$valueAccoun['asset']]['BUYPriceUSD'] = $accountBalance[$valueAccoun['asset']]['BUYPrice'] * $order['kurs']['kursUSD'];       
            $accountBalance[$valueAccoun['asset']]['update']= 'SymbolBUY';
        }


        
        //Условие проверки на ОБНОВЛЕНИЯ  по последнему ордеру
        $n=0;
        //Исключаем    
        if ($accountBalanceOld[$valueAccoun['asset']]['total'] >= $accountBalance[$valueAccoun['asset']]['total']) $n++;
        //Исключаем    
        if (isset($accountBalanceOld[$valueAccoun['asset']]['BUYPrice']))  $n++;
        //Исключаем    
        if ($accountBalanceOld[$valueAccoun['asset']]['BUYPrice'] !=='')  $n++;
        //Исключаем    
        if ($accountBalanceOld[$valueAccoun['asset']]['BUYPrice'] != '0')  $n++;
        //Исключаем    
        if ($updateBUYPrice == '0')  $n++;

        if ($n==5)  continue; 

        $accountBalance[$valueAccoun['asset']]['update']= 'InfoAsset';


       // echo $valueAccoun['asset'], " баланс", $accountBalance[$valueAccoun['asset']]['total'];
        $arrayemaxOrders=array();
        if ($arraysymbolInfoBase = array_values($Bin->multiSearch($exchangeInfo['symbols'], array('quoteAsset' => $valueAccoun['asset'], 'status'=>'TRADING')))) {

            // echo '<br/>      Может быть базой количество:', count($arraysymbolInfoBase),'<br/>';
            foreach ($arraysymbolInfoBase as $key => $value) {                
                //Получить все заказы
                $allOrders= $Bin->allOrders(array('symbol' => $value['symbol'], 'limit' =>'10'));
                if (count($allOrders)==0) continue;
                //Выбераем продажи за asset
                $OrdersSELL = array_values($Bin->multiSearch($allOrders, array('status' => 'EXPIRED','status' => 'FILLED',  'side' => 'SELL')));
                if (count($OrdersSELL)==0) continue;
                //Запоминаем последний ордер
                $arrayemaxOrders[]= max($OrdersSELL);

               // echo $value['symbol'], ' Orders:', count($allOrders),';  ';
            }
        }
        if($arraysymbolInfoAsset = array_values($Bin->multiSearch($exchangeInfo['symbols'], array('baseAsset' => $valueAccoun['asset'], 'status'=>'TRADING')))){
            // echo '<br/>      asset можем купить:', count($arraysymbolInfoAsset),'<br/>';
            foreach ($arraysymbolInfoAsset as $key => $value) {
                //Получить все заказы
                $allOrders= $Bin->allOrders(array('symbol' => $value['symbol'], 'limit' =>'10'));
                if (count($allOrders)==0) continue;
                //Выбераем закупки                
                $OrdersBUY = array_values($Bin->multiSearch($allOrders, array( 'status' => 'EXPIRED','status' => 'FILLED', 'side' => 'BUY')));
                if (count($OrdersBUY)==0) continue;
                //Запоминаем последний ордер
                $arrayemaxOrders[]=max($OrdersBUY);

                // echo $value['symbol'], ' Orders:', count($allOrders),';  ';
            }

        }

        //Сортируем и получаем самую последний из всех symbols
        if (count($arrayemaxOrders)==0) continue; 
            usort($arrayemaxOrders, function($a, $b) {
                return $a['time'] - $b['time'];
            });
        // $Bin->showArrayTable($arrayemaxOrders);          
       // continue;   
        $maxOrdersBUY = array_pop($arrayemaxOrders);
        $accountBalance[$valueAccoun['asset']]['BUYSymbol'] =  $maxOrdersBUY['symbol'];
        $accountBalance[$valueAccoun['asset']]['side'] =  $maxOrdersBUY['side'];
        $accountBalance[$valueAccoun['asset']]['BUYTime']= $maxOrdersBUY['time'];


        
        $maxOrdersBUYsymbolInfo = array_values($Bin->multiSearch($exchangeInfo['symbols'], array('symbol' => $maxOrdersBUY['symbol'], 'status'=>'TRADING')));
        // $Bin->show($maxOrdersBUYsymbolInfo);



        if ($maxOrdersBUY['side'] == 'BUY') {
            $kurs = $Bin->kurs($maxOrdersBUYsymbolInfo[0]['quoteAsset'], $tickerPrice);
            $accountBalance[$valueAccoun['asset']]['BUYPrice'] = $avgpriceBUY = number_format($maxOrdersBUY['cummulativeQuoteQty']/$maxOrdersBUY['executedQty'], 8, '.', '');
            // $accountBalance[$valueAccoun['asset']]['executedQty'] = $executedQty = number_format($maxOrdersBUY['executedQty'], 8, '.', '');

            // $accountBalance[$valueAccoun['asset']]['BUYkursUSD'] = $kurs['kursUSD'];
            // $accountBalance[$valueAccoun['asset']]['BUYkursBTC'] = $kurs['kursBTC'];
             
            // $accountBalance[$valueAccoun['asset']]['BUYPriceBTC'] = number_format($avgpriceBUY*$kurs['kursBTC'], 8, '.', ''); 
            // $accountBalance[$valueAccoun['asset']]['BUYPriceUSD'] = number_format($avgpriceBUY*$kurs['kursUSD'], 8, '.', '');

        }
        if ($maxOrdersBUY['side'] == 'SELL') {
            $kurs = $Bin->kurs($maxOrdersBUYsymbolInfo[0]['quoteAsset'], $tickerPrice);
            $accountBalance[$valueAccoun['asset']]['BUYPrice'] = $avgpriceBUY = number_format($maxOrdersBUY['cummulativeQuoteQty']/$maxOrdersBUY['executedQty'], 8, '.', '');
            // $accountBalance[$valueAccoun['asset']]['BUYkursUSD'] = $kurs['kursUSD'];
            // $accountBalance[$valueAccoun['asset']]['BUYkursBTC'] = $kurs['kursBTC'];
             
            // $accountBalance[$valueAccoun['asset']]['BUYPriceBTC'] = number_format($kurs['kursBTC'], 8, '.', ''); 
            // $accountBalance[$valueAccoun['asset']]['BUYPriceUSD'] = number_format($kurs['kursUSD'], 8, '.', '');

        }

     
        // echo $maxOrdersBUY['symbol'], ' ', $valueAccoun['asset'], ' avgpriceBUY: ', $avgpriceBUY, ' kursUSD: ', $accountBalance[$valueAccoun['asset']]['kursUSD'],'<br/>';
        // $Bin->show($maxOrdersBUY);
        
    }

$time = microtime(true) - $start;
echo 'Время выполнения обновления: '.round($time, 4).' сек.<br/><br/><br/>';
$start2 = microtime(true); 


// die('STOP STOP');


//Анализируем остатки и ПРОДАЕМ**************************************************
foreach ($accountBalance as $keyAccoun => $valueAccoun) {
    // $Bin->show($tradeFeeKom[$accountBalance[$keyAccoun]['symbol']]);
    //Удаляем  пустоту
    if (!isset($valueAccoun['asset'])) {
        unset($accountBalance[$keyAccoun]);
        continue;  
    }
    //Удаляем строки с балагсом менее
    if ($valueAccoun['total_USD'] < 0.1){
        unset($accountBalance[$keyAccoun]);
       continue; 
    } 
    //Исключаем  asset USDT
    if ($valueAccoun['asset']=='USDT') continue;

    //Находим информацию
    $AssetInfo = array_values($Bin->multiSearch($exchangeInfo['symbols'], array('symbol' => $accountBalance[$valueAccoun['asset']]['symbol'], 'status' => 'TRADING')));

    // $accountBalance[$valueAccoun['asset']]['symbol'] = '';
    // $accountBalance[$valueAccoun['asset']]['base'] = '';
    // $accountBalance[$valueAccoun['asset']]['bidPrice'] = '';
    // // $accountBalance[$valueAccoun['asset']]['PricBTC'] = '';
    // // $accountBalance[$valueAccoun['asset']]['PricUSD'] = '';
        
    // $accountBalance[$valueAccoun['asset']]['quantitySELL'] = '';

    // $accountBalance[$valueAccoun['asset']]['sumBUY'] = '';
    // $accountBalance[$valueAccoun['asset']]['sumtaker']='';

    // $accountBalance[$valueAccoun['asset']]['sumSELL'] =''; 
    // $accountBalance[$valueAccoun['asset']]['summaker'] = '';

    // $accountBalance[$valueAccoun['asset']]['margin_sum'] = '';
    // $accountBalance[$valueAccoun['asset']]['margin_sum_USD'] = '';

    // $accountBalance[$valueAccoun['asset']]['margin_p'] = '';
    // $accountBalance[$valueAccoun['asset']]['max_p'] = '';
    // $accountBalance[$valueAccoun['asset']]['change_p'] = '';
    // $accountBalance[$valueAccoun['asset']]['sell'] = ''; 


//*********************************************************************************
    $accountBalance[$valueAccoun['asset']]['symbol'] = $valueAccoun['BUYSymbol'];
    
    //Находим текущую цену symbol
    $PricSymbol = array_values($Bin->multiSearch($bookTicker, array('symbol' => $accountBalance[$valueAccoun['asset']]['symbol'])));
    $accountBalance[$valueAccoun['asset']]['bidPrice'] = $PricSymbol['0']['bidPrice'];

 
    $accountBalance[$valueAccoun['asset']]['base'] = $AssetInfo[0]['quoteAsset'];

    //Получаем курс
    $kurs = $Bin->kurs($AssetInfo[0]['quoteAsset'], $tickerPrice);
    // $Bin->show($kurs);





    // $accountBalance[$keyAccoun]['PricUSD'] = $kurs['kursUSD'];
    // $accountBalance[$keyAccoun]['PricBTC'] = $kurs['kursBTC'];

 //    // echo '***MAX ', $SymbolmaxPric['symbol'], '  Цена: ', $SymbolmaxPric['askPrice'],'  ЦенаUSD: ', $SymbolmaxPric['PricUSD'], "<br/><br/>";
    // if ($accountBalance[$valueAccoun['asset']]['total'] < $accountBalance[$valueAccoun['asset']]['min'] //asset c низким балансом
    //     || !isset($accountBalanceOld[$valueAccoun['asset']]['BUYPriceUSD'])){ // если нет цены закупки
    //     // echo $valueAccoun['asset'], " continue<br/>";
    //     continue; 
    // }  

    //ПРОДАЖА*******************************

 
        //Определяем количество для продажи
        $balancequantitySELL = $valueAccoun['total'] - $valueAccoun['min'];
        $accountBalance[$valueAccoun['asset']]['quantitySELL'] = $quantitySELL = $Bin->round_min($balancequantitySELL>0?$balancequantitySELL:0, $arrayAssetInfo[0]['filters'][2]['minQty']);
       
        $accountBalance[$valueAccoun['asset']]['sumBUY'] = $sumBUY = number_format($quantitySELL * $accountBalanceOld[$valueAccoun['asset']]['BUYPrice'], 8, '.', '');       
        $accountBalance[$valueAccoun['asset']]['sumSELL'] = $sumSELL = number_format($quantitySELL * $accountBalance[$valueAccoun['asset']]['bidPrice'], 8, '.', '');
        
        //Исключаем остатки менее 10$
        if ($accountBalance[$valueAccoun['asset']]['total_USD']  < 10 || $sumBUY == 0) continue;
   
        //Находим комисию биржи
        $accountBalance[$valueAccoun['asset']]['sumtaker'] = $sumtaker = number_format(($sumBUY * $tradeFeeKom[$accountBalance[$keyAccoun]['symbol']]['taker']), 8, '.', '');
        $accountBalance[$valueAccoun['asset']]['summaker'] = $summaker = number_format(($sumSELL * $tradeFeeKom[$accountBalance[$keyAccoun]['symbol']]['maker']), 8, '.', '');

        //находим маржу и % маржи
        $accountBalance[$valueAccoun['asset']]['margin_sum'] = $margin_sum = number_format($sumSELL - $summaker - $sumBUY - $sumtaker , 8, '.', ''); 
        $accountBalance[$valueAccoun['asset']]['margin_sum_USD'] = number_format($margin_sum * $kurs['kursUSD'], 4, '.', ''); 

        $accountBalance[$valueAccoun['asset']]['margin_p'] = $margin_p = number_format($margin_sum/$sumBUY*100, 8, '.', '');

        //Запоминмем максимальный % маржи
        if ($accountBalanceOld[$valueAccoun['asset']]['max_p'] == '' || $accountBalanceOld[$valueAccoun['asset']]['max_p'] < $margin_p) {
            $accountBalance[$valueAccoun['asset']]['max_p'] = $margin_p;        
        }else{
            $accountBalance[$valueAccoun['asset']]['max_p'] = $accountBalanceOld[$valueAccoun['asset']]['max_p'];
        }

        //выщитываем изминение % маржи    
        $accountBalance[$valueAccoun['asset']]['change_p'] = $change_p = round(($margin_p - $accountBalanceOld[$valueAccoun['asset']]['max_p']),3);

     



   //выщитываем изминение % маржи
        $change_p = round(($margin_p - $OpenSymbol[$value['symbol']]['max_p']),8);

        $showOpenSymbol[$value['symbol']]['BUYPrice'] = number_format($BuyPrice, 8, '.', '');
        $showOpenSymbol[$value['symbol']]['bidPrice'] = number_format($value['bidPrice'], 8, '.', '');
        $showOpenSymbol[$value['symbol']]['sumBUY'] =  number_format($sumBUY, 8, '.', '');
        $showOpenSymbol[$value['symbol']]['sumSELL'] =  number_format($sumSELL, 8, '.', '');
        $showOpenSymbol[$value['symbol']]['sumtaker'] = number_format($sumtaker, 8, '.', ''); 
        $showOpenSymbol[$value['symbol']]['summaker'] = number_format($summaker, 8, '.', ''); 
        $showOpenSymbol[$value['symbol']]['margin_sum'] = number_format($margin_sum, 8, '.', '');
        $showOpenSymbol[$value['symbol']]['margin_sum_USD'] = number_format($margin_sum_USD, 2, '.', '');
        $showOpenSymbol[$value['symbol']]['margin_p'] = number_format($margin_p, 2, '.', '');
        $showOpenSymbol[$value['symbol']]['max_p'] = number_format($OpenSymbol[$value['symbol']]['max_p'], 2, '.', '');
        $showOpenSymbol[$value['symbol']]['change_p'] = number_format($change_p, 2, '.', '');
        $showOpenSymbol[$value['symbol']]['TRADE'] = '';
        // echo 'margin_sum: ', $margin_sum, 'margin_p: ', $margin_p, '  change_p: ', $change_p, "<br/>";

    }
       


        //Stop Loss      
        if(-1== bccomp((string)$margin_p, (string)$lossМargin_p, 8) &&  -1== bccomp((string)$value['bidPrice'], (string)$value['lastPrice'], 8) && !in_array($symbolInfo[0]['baseAsset'], $positionlong)){
        // echo $value['symbol'], "Stop Loss", 'margin_p:', $margin_p, "<br/>";
            //масив параметров для продажи
            $ParamsSELL = array('symbol'=>$value['symbol'], 
                        'side' => 'SELL', 
                        'type' => 'MARKET', 
                        'quantity' => $quantitySELL,
                        'timeInForce' => 'IOC', 
                        'price' => $value['bidPrice']);   
           
            // Создаем ордер на продажу по рыночным ценам
             if ($orderSELL_SL == '1') {
                $showOpenSymbol[$value['symbol']]['TRADE'] = "Stop Loss";

                // $Bin->show($ParamsSELL);
                if ($order = $Bin->orderNEW($ParamsSELL)) {
                    // $Bin->show($order);
                    if ($order['status']=='FILLED'||$order['status']=='EXPIRED') {
                        $order['asset']=$symbolInfo[0]['baseAsset'];
                        $order['base']=$symbolInfo[0]['quoteAsset'];

                        $order['BUYSymbol']=$OpenSymbol[$value['symbol']]['symbol'];
                        $order['BUYTime']=$OpenSymbol[$value['symbol']]['transactTime'];
                        $order['BUYPrice']=$BuyPrice;                        
                        

                        $order['bidPrice']=$value['bidPrice'];
                        $order['orderPrice']=$order['cummulativeQuoteQty']/$order['executedQty'];

                        $order['BUYsum'] = $order['BUYPrice']*$order['executedQty'];
                        $order['orderSum'] = $order['cummulativeQuoteQty'];

                        $order['summaker'] = ($order['cummulativeQuoteQty'] * $tradeFeeKom[$value['symbol']]['maker']);
                        $order['commission'] = array_sum(array_column($order['fills'], 'commission'));

                        $order['marginSM']=$order['cummulativeQuoteQty'] - $order['BUYsum'] -$order['summaker'];
                        // $order['margin']=$order['cummulativeQuoteQty'] - $order['BUYsum'] -$order['commission'];
                        

                        $order['marginSM_USD']= $order['marginSM'] * $kurs['kursUSD'];
                        // $order['marginUSD']= $order['margin'] * $kurs['kursUSD'];
                        $order['marginSM_BTC']= $order['marginSM'] * $kurs['kursBTC'];
                        // $order['marginBTC']= $order['margin'] * $kurs['kursBTC'];
                        $order['kurs']= $kurs;
                        $ArhivorderSELL[] = $order;
                        $Bin->saveFile($ArhivorderSELL, $fileArhivorderSELL);
                    }
                }
            }
            if($order_Test == '1'){
                        $showOpenSymbol[$value['symbol']]['TRADE'] = "TEST Stop Loss";

                        $order['asset']=$symbolInfo[0]['baseAsset'];
                        $order['base']=$symbolInfo[0]['quoteAsset'];
                        $order['TEST']='TEST';
                        $order['type'] = "TEST Stop Loss";


                        $order['BUYSymbol']=$OpenSymbol[$value['symbol']]['symbol'];
                        $order['BUYTime']=$OpenSymbol[$value['symbol']]['transactTime'];
                        $order['BUYPrice']=$BuyPrice;                        
                        

                        $order['bidPrice']=$value['bidPrice'];
                        $order['orderPrice']=$value['bidPrice'];

                        $order['BUYsum'] = $order['BUYPrice']*$quantitySELL;
                        $order['orderSum'] = $value['bidPrice']*$quantitySELL;

                        $order['summaker'] = ($order['orderSum'] * $tradeFeeKom[$value['symbol']]['maker']);
                        // $order['commission'] = array_sum(array_column($order['fills'], 'commission'));

                        $order['marginSM']=$order['orderSum'] - $order['BUYsum'] -$order['summaker'];
                        // $order['margin']=$order['cummulativeQuoteQty'] - $order['BUYsum'] -$order['commission'];
                        

                        $order['marginSM_USD']= $order['marginSM'] * $kurs['kursUSD'];
                        // $order['marginUSD']= $order['margin'] * $kurs['kursUSD'];
                        $order['marginSM_BTC']= $order['marginSM'] * $kurs['kursBTC'];
                        // $order['marginBTC']= $order['margin'] * $kurs['kursBTC'];

                        $order['kurs']= $kurs;
                        $ArhivorderSELL[] = array_merge($OpenSymbol[$value['symbol']],$order);
                        unset($OpenSymbol[$value['symbol']]);
                        $Bin->saveFile($ArhivorderSELL, $fileArhivorderSELL);
                }  
        }
        //Take profit   
        if (1== bccomp((string)$margin_p, (string)$TakeProfit_p, 8) && -1== bccomp((string)$change_p, (string)$declinem_p, 8) &&  -1== bccomp((string)$value['bidPrice'], (string)$value['lastPrice'], 8)) {
        // echo $value['symbol'], "Take profit<br/>", 'margin_p:', $margin_p, "<br/>";
            //масив параметров для продажи
            $ParamsSELL = array('symbol'=>$value['symbol'], 
                        'side' => 'SELL', 
                        'type' => 'LIMIT', 
                        'quantity' => $quantitySELL,
                        'timeInForce' => 'IOC', 
                        'price' => $value['bidPrice']); 
            
            // Создаем ордер на продажу
            if ($orderSELL == '1') {
                $showOpenSymbol[$value['symbol']]['TRADE'] = "Take profit";

                // $Bin->show($ParamsSELL);
                if ($order = $Bin->orderNEW($ParamsSELL)) {
                    // $Bin->show($order);
                    if ($order['status']=='FILLED' || $order['status']=='EXPIRED') {
                        $order['asset']=$symbolInfo[0]['baseAsset'];
                        $order['base']=$symbolInfo[0]['quoteAsset'];

                        $order['BUYSymbol']=$OpenSymbol[$value['symbol']]['symbol'];
                        $order['BUYTime']=$OpenSymbol[$value['symbol']]['transactTime'];
                        $order['BUYPrice']=$BuyPrice;                        
                        

                        $order['bidPrice']=$value['bidPrice'];
                        $order['orderPrice']=$order['cummulativeQuoteQty']/$order['executedQty'];

                        $order['BUYsum'] = $order['BUYPrice']*$order['executedQty'];
                        $order['orderSum'] = $order['cummulativeQuoteQty'];

                        $order['summaker'] = ($order['cummulativeQuoteQty'] * $tradeFeeKom[$value['symbol']]['maker']);
                        $order['commission'] = array_sum(array_column($order['fills'], 'commission'));

                        $order['marginSM']=$order['cummulativeQuoteQty'] - $order['BUYsum'] -$order['summaker'];
                        // $order['margin']=$order['cummulativeQuoteQty'] - $order['BUYsum'] -$order['commission'];
                        

                        $order['marginSM_USD']= $order['marginSM'] * $kurs['kursUSD'];
                        // $order['marginUSD']= $order['margin'] * $kurs['kursUSD'];
                        $order['marginSM_BTC']= $order['marginSM'] * $kurs['kursBTC'];
                        // $order['marginBTC']= $order['margin'] * $kurs['kursBTC'];

                        $order['kurs']= $kurs;
                        $ArhivorderSELL[] = $order;
                        $Bin->saveFile($ArhivorderSELL, $fileArhivorderSELL);

                    }
                }
            }
            if($order_Test == '1'){
                        $showOpenSymbol[$value['symbol']]['TRADE'] = "TEST Take profit";

                        $order['asset']=$symbolInfo[0]['baseAsset'];
                        $order['base']=$symbolInfo[0]['quoteAsset'];
                        $order['TEST']='TEST';
                        $order['type'] = "TEST Take profit";


                        $order['BUYSymbol']=$OpenSymbol[$value['symbol']]['symbol'];
                        $order['BUYTime']=$OpenSymbol[$value['symbol']]['transactTime'];
                        $order['BUYPrice']=$BuyPrice;                        
                        

                        $order['bidPrice']=$value['bidPrice'];
                        $order['orderPrice']=$value['bidPrice'];

                        $order['BUYsum'] = $order['BUYPrice']*$quantitySELL;
                        $order['orderSum'] = $value['bidPrice']*$quantitySELL;

                        $order['summaker'] = ($order['orderSum'] * $tradeFeeKom[$value['symbol']]['maker']);
                        // $order['commission'] = array_sum(array_column($order['fills'], 'commission'));

                        $order['marginSM']=$order['orderSum'] - $order['BUYsum'] -$order['summaker'];
                        // $order['margin']=$order['cummulativeQuoteQty'] - $order['BUYsum'] -$order['commission'];
                        

                        $order['marginSM_USD']= $order['marginSM'] * $kurs['kursUSD'];
                        // $order['marginUSD']= $order['margin'] * $kurs['kursUSD'];
                        $order['marginSM_BTC']= $order['marginSM'] * $kurs['kursBTC'];
                        // $order['marginBTC']= $order['margin'] * $kurs['kursBTC'];

                        $order['kurs']= $kurs;
                        $ArhivorderSELL[] = array_merge($OpenSymbol[$value['symbol']],$order);
                        unset($OpenSymbol[$value['symbol']]);
                        $Bin->saveFile($ArhivorderSELL, $fileArhivorderSELL);
                }
        } 

  

//удаляем старый и записываем новый масив accountBalance
unlink($filaccountBalance);
$Bin->saveFile($accountBalance, $filaccountBalance);

$Bin->saveFile($archiveorderSELL, $filarchiveorderSELL);

//Сортируем и смотрим
usort($accountBalance, function($a, $b) {
    return $b['margin_p']*100000000 - $a['margin_p']*100000000;
});
echo '<br/>ПРОДАЖА Итого выбрал : ', count($accountBalance), '<br/>';
$Bin->showArrayTable($accountBalance);


$baseArchiv = array_values(array_unique(array_column($accountBalance, 'base')));
// $Bin->showArrayTable($baseArchiv);

// foreach ($base as $key => $value) {
//     //Получаем курс
//     $kurs = $Bin->kurs($value, $tickerPrice);
//         $T['base'] = $value;

//         $T['total_USD'] = number_format(array_sum(array_column($Bin->multiSearch($accountBalance, array('base' => $value)), 'total_USD')), 8, '.', '');
//         $T['countOrder'] = count(array_column($Bin->multiSearch($archiveorderSELL, array('base' => $value)), 'margin'));
//         $T['ProfitToday'] = number_format(array_sum(array_column($Bin->multiSearch($archiveorderSELL, array('base' => $value)), 'margin')), 8, '.', '');
//         $T['kursUSD'] = $kurs['kursUSD'];
//         $T['ProfitTodayUSD'] = round(array_sum(array_column($Bin->multiSearch($archiveorderSELL, array('base' => $value)), 'margin'))*$kurs['kursUSD'], 2);
//         $baseArchiv[$key] = $T;

// }
// echo 'За сегодня: <font size="20" color="green" face="Arial">', round(array_sum(array_column($archiveorderSELL, 'marginUSD')),2), ' $</font>  баланс ', round(array_sum(array_column($accountBalance, 'total_USD')),2), ' <br/>';
// echo 'За сегодня: <font size="20" color="green" face="Arial">', number_format(array_sum(array_column($archiveorderSELL, 'marginBTC')), 8, '.', ''), ' ₿</font>  баланс ', round(array_sum(array_column($accountBalance, 'total_BTC')),8), ' <br/>';

$Bin->showArrayTable($archiveorderSELL);

$time = microtime(true) - $start;
echo 'Время выполнения скрипта: '.round($time, 4).' сек.<br/><br/><br/>';
$time2 = microtime(true) - $start2;
echo 'Время выполнения скрипта Анализируем остатки и ПРОДАЕМ: '.round($time2, 4).' сек.<br/><br/><br/>';

exit();
?>