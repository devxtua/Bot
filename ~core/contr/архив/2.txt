<?php
//Устанавливаем настройки памяти
    // echo "memory_limit ", ini_get('memory_limit'), "<br />";
    // ini_set('memory_limit', '1024M');   
    // echo "memory_limit ", ini_get('memory_limit'), "<br />";

    //Устанавливаем настройки времени
    // echo "max_execution_time ", ini_get('max_execution_time'), "<br />";
    ini_set('max_execution_time', 1000);    //  одно и тоже что set_time_limit(6000);
    // echo "max_execution_time ", ini_get('max_execution_time'), "<br />";

    // ob_implicit_flush(1);
     
    // ob_start();
    // ob_get_contents();
    // ob_get_clean();
    // ob_end_flush();
header('refresh: 1');
echo "Привет! Меня зовут BUCKS (v4)<br/>";
$start = microtime(true);  

//Создаем класс
$Bin = new binance();
//Проверяем торговый статус API аккаунта
// $apiTradingStatus= $Bin->apiTradingStatus(array());
// $Bin->show($apiTradingStatus);

//************************ОБЩИЕ ДАНЫЕ БИРЖИ (загружаем или читаем с файла)**************
$filetradeFeeKom = 'E:\binance\tradeFeeKom.txt';
$fileexchangeInfo = 'E:\binance\exchangeInfo.txt';

if(time()-filemtime($filetradeFeeKom) > 3600 || time()-filemtime($fileexchangeInfo) > 3600){
    //Даные в файле устарели УДАЛЯЕМ 
    unlink($filetradeFeeKom);
    unlink($fileexchangeInfo);

    //Получаем актуальную информацию
    $tradeFeeKom= $Bin->tradeFeeKom();      //О комисиях
    $exchangeInfo = $Bin->exchangeInfo();   //Правила биржевой торговли и символьная информация
    //записиваем даные в файл
    $Bin->saveFile($tradeFeeKom, $filetradeFeeKom);
    $Bin->saveFile($exchangeInfo, $fileexchangeInfo);

    $time = microtime(true) - $start;
    echo 'Файлы ОБНОВЛЕНЫ. время: '.round($time, 4).' сек.<br/>';
}else{    
    //Даные в файле актуальны читаем
    $tradeFeeKom = $Bin->readFile($filetradeFeeKom);
    $exchangeInfo = $Bin->readFile($fileexchangeInfo);

    $time = microtime(true) - $start;
    echo 'Файлы прочитаны. время: '.round($time, 4).' сек.<br/>';
}

//Смотрим
// $Bin->show($tradeFeeKom);
// $Bin->show($exchangeInfo);

//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

//Отключить создания ордеров покупку
$orderBUY = 0;
//выбераем  symbol по статистике и изминениям за 24час
//количество сделок за 24 час
$countTrends= 1000; 
// % изминения цены за 24 час
$priceChangePercent= -3; 



//стартовый лимит закупки
$trade_limit = 25; 





//Включить создания ордеров Stop Loss
$orderSELL_SL = 1;
//потеря маржи % при Stop Loss
$lossМargin_p = -1;




//Включить создания ордеров продажи TakeProfit
$orderSELL = 1;
//минимальная маржа % TakeProfit
$TakeProfit_p = 0.7;
//сниженеи (потеря) маржи % при TakeProfit
$declinem_p = -0.1;



//процент контроля минимальной и максимальной цен
$controlChangePrice_p = 3;
//процент контроля  при ПОКУПКЕ
$BUYcontrolChangePrice_p = 0.5;


//процент контроля роста цены от минимальной для покупки
$controltopPrice_p = 1;



//positionlong
$positionlong = array( 'BTC');

//Определяем базове валют

$base['BTC']= array('minBalans'=>0.5, 'minPriceBuy'=>0.00000100);
$base['USDT']= array('minBalans'=>1000, 'minPriceBuy'=>0.00000100);
$base['BNB']= array('minBalans'=>10, 'minPriceBuy'=>0.00000100);
$base['ETH']= array('minBalans'=>10, 'minPriceBuy'=>0.00000100);
$base['TRX']= array('minBalans'=>100, 'minPriceBuy'=>0.00000100);
$base['XRP']= array('minBalans'=>100, 'minPriceBuy'=>0.00000100);
$base['EUR']= array('minBalans'=>1000, 'minPriceBuy'=>0.00000100);







//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


//Получение ПОСЛЕДНИХ ДАНЫХ  symbol-----------------------------
//Получить изминения за 24 часса
$ticker24hr = $Bin->ticker24hr();
// $Bin->show($ticker24hr[0]);

//Последняя цена за символ
$tickerPrice = $Bin->tickerPrice(array());

//Получить свободный баланс АКТИВОВ
$accountBalance= $Bin->accountBalance($base);
// $Bin->showArrayTable($accountBalance);


$filehistoryPrice = 'E:\binance\historyPrice.txt';
if (!$historyPrice = $Bin->readFile($filehistoryPrice)) {
    $historyPrice = array();
}


$fileOpenSymbol = 'E:\binance\openSymbol.txt';
if (!$OpenSymbol = $Bin->readFile($fileOpenSymbol)) {
    $OpenSymbol = array();
}

$fileArhivorderSELL = 'E:\binance\ArhivorderSELL.txt';
if (!$ArhivorderSELL = $Bin->readFile($fileArhivorderSELL)) {

    $ArhivorderSELL = array();
}else{
    // for ($i=0; $i < 100; $i++) { 
    //   if ($ArhivorderSELL[$i]['marginSM_USD']<1000) {
    //     echo $ArhivorderSELL[$i]['symbol']," del<br/>";
    //     unset($ArhivorderSELL[$i]);
        
    //   }

    // }
   
 
}
// $Bin->show($ArhivorderSELL[25]);
// unset($ArhivorderSELL[25]);
//  $Bin->saveFile($ArhivorderSELL, $fileArhivorderSELL);
//  die();

//ПРОДАЖА и Покупка symbol-----------------------------
$BUY = $showOpenSymbol=array();
foreach ($ticker24hr as $key => $value) {
        // echo $value['symbol'], "<br/>";
        //Получаем информацию о symbol и исключаем неактивные пары
        if (!$symbolInfo = array_values($Bin->multiSearch($exchangeInfo['symbols'], array('symbol' => $value['symbol'], 'status'=>'TRADING'))) ) continue; 
        //сли масив имтории пуст добавляем первый елемент
        if (empty($historyPrice[$value['symbol']])) {
               $historyPrice[$value['symbol']][] = $value['askPrice'];
        }
        //добавляем последующие елементы если они отличаются от последнего елемент
        if (0!= bccomp((string)$historyPrice[$value['symbol']]['0'], (string)$value['askPrice'], 8)) {
            array_unshift($historyPrice[$value['symbol']], $value['askPrice']);
        }
        //находи максимум и минимум
        // $maxPrice = max($historyPrice[$value['symbol']]);
        // $minPrice = min($historyPrice[$value['symbol']]);
        // $spred = number_format($maxPrice - $minPrice, 8, '.', '');
        // $ChangePrice_p = number_format($spred*100/$minPrice, 4, '.', '');
        // $keyDel = $kD = '';

        // if (1== bccomp((string)$ChangePrice_p, (string)$controlChangePrice_p, 8)) {
        //     $keyDel['max'] = array_search ($maxPrice, $historyPrice[$value['symbol']]);
        //     $keyDel['min'] = array_search ($minPrice, $historyPrice[$value['symbol']]);
        //     $kD = max($keyDel)+2;       
        // }
        $keyDel = $kD = '';
        $maxPrice = $minPrice = $value['askPrice'];
        foreach ($historyPrice[$value['symbol']] as $hiskey => $hisvalue) {
                if (1== bccomp((string)$hisvalue, (string)$maxPrice, 8)) {
                  $maxPrice= $hisvalue;
                }
                if (-1== bccomp((string)$hisvalue, (string)$minPrice, 8)) {
                  $minPrice= $hisvalue;
                }
                $spred = number_format($maxPrice - $minPrice, 8, '.', '');    
                $ChangePrice_p = number_format($spred*100/$minPrice, 4, '.', '');
                if (1== bccomp((string)$ChangePrice_p, (string)$controlChangePrice_p, 8)) {
                    $keyDel['max'] = array_search ($maxPrice, $historyPrice[$value['symbol']]);
                    $keyDel['min'] = array_search ($minPrice, $historyPrice[$value['symbol']]);
                    $kD = max($keyDel);
                }            
        }
        //удаляем ненужные даные с истории
        if ($kD !='') {
          // echo $value['symbol'], ' count до: ', count($historyPrice[$value['symbol']]), ' kD:',$kD ;
          array_splice($historyPrice[$value['symbol']], (int)$kD);
          // echo ' count после: ', count($historyPrice[$value['symbol']]), "<br/>";
        }


        // print_r($historyPrice[$value['symbol']]);


        //Получаем курс BTC USD
        $kurs = $Bin->kurs($symbolInfo['0']['quoteAsset'], $tickerPrice);



    //ППРОДАЖА  **************  in_array($value['symbol'], array_column($OpenSymbol, 'symbol'))  
    if (in_array($value['symbol'], array_column($OpenSymbol, 'symbol'))) {

      

        // echo $value['symbol'], "<br/>";

        //сключаем баланс меньше минимальгого
        // if (-1== bccomp((string)$accountBalance[$symbolInfo[0]['baseAsset']]['total'], (string)$base[$symbolInfo['0']['quoteAsset']]['minBalans'], 8)) continue; 

        //Определяем количество для продажи по остатку
        $balancequantitySELL = $accountBalance[$symbolInfo[0]['baseAsset']]['total'] - $base[$symbolInfo[0]['baseAsset']]['minBalans'];
        //Определяем количество для продажи по последнему ордеру
        // $balancequantitySELL = $OpenSymbol[$value['symbol']]['executedQty'];

        //Если нечего продавать удаляем из масива
        if ($balancequantitySELL=='0') {
            unset($OpenSymbol[$value['symbol']]);
            continue;
        }
        
        $quantitySELL = $Bin->round_min($balancequantitySELL>0?$balancequantitySELL:0, $symbolInfo[0]['filters'][2]['minQty']);
        $sumSELL = $quantitySELL * $value['bidPrice'];

        $showOpenSymbol[$value['symbol']]['symbol'] = $value['symbol'];
        $showOpenSymbol[$value['symbol']]['asset']=$symbolInfo[0]['baseAsset'];
        $showOpenSymbol[$value['symbol']]['total_USD'] = round($accountBalance[$symbolInfo[0]['baseAsset']]['total_USD'], 2);
        $showOpenSymbol[$value['symbol']]['base']=$symbolInfo[0]['quoteAsset'];
        $showOpenSymbol[$value['symbol']]['transactTime'] = $OpenSymbol[$value['symbol']]['transactTime'];
        $showOpenSymbol[$value['symbol']]['quantitySELL'] = $quantitySELL;
        



    if ($OpenSymbol[$value['symbol']]['cummulativeQuoteQty']>0 && ($sumSELL*$kurs['kursUSD'])>10) {
        $BuyPrice = $OpenSymbol[$value['symbol']]['cummulativeQuoteQty']/$OpenSymbol[$value['symbol']]['executedQty'];
        

//number_format($BuyPrice, 8, '.', '');
        // unset($OpenSymbol[$value['symbol']]['quantitySELL'],
        //   $OpenSymbol[$value['symbol']]['sumBUY'],
        //   $OpenSymbol[$value['symbol']]['sumSELL'],
        //   $OpenSymbol[$value['symbol']]['sumtaker'],
        //   $OpenSymbol[$value['symbol']]['summaker'],
        //   $OpenSymbol[$value['symbol']]['margin_sum'],
        //   $OpenSymbol[$value['symbol']]['margin_sum_USD'],
        //   $OpenSymbol[$value['symbol']]['margin_p'],
        //   $OpenSymbol[$value['symbol']]['max_p'],
        //   $OpenSymbol[$value['symbol']]['change_p']);
        // $Bin->saveFile($OpenSymbol, $fileOpenSymbol);
        // die();

        //Находим суму покупки и продажи


        

        $sumBUY = $quantitySELL * $BuyPrice;
        

        //Находим комисию биржи
        $sumtaker = ($sumBUY * $tradeFeeKom[$value['symbol']]['taker']);
        $summaker = ($sumSELL * $tradeFeeKom[$value['symbol']]['maker']);   
                
        //находим маржу и % маржи
        $margin_sum = $sumSELL - $summaker - $sumBUY - $sumtaker; 
        $margin_sum_USD = $margin_sum * $kurs['kursUSD']; 
        

        $margin_p = $margin_sum/$sumBUY*100;

        //Запоминмем максимальный % маржи
        if ($OpenSymbol[$value['symbol']]['max_p'] == '' || $OpenSymbol[$value['symbol']]['max_p'] < $margin_p) {
            $OpenSymbol[$value['symbol']]['max_p'] = $margin_p;        
        }
        
        //выщитываем изминение % маржи
        $change_p = round(($margin_p - $OpenSymbol[$value['symbol']]['max_p']),8);

        $showOpenSymbol[$value['symbol']]['BUYPrice'] = number_format($BuyPrice, 8, '.', '');
        $showOpenSymbol[$value['symbol']]['bidPrice'] = number_format($value['bidPrice'], 8, '.', '');
        $showOpenSymbol[$value['symbol']]['sumBUY'] =  number_format($sumBUY, 8, '.', '');
        $showOpenSymbol[$value['symbol']]['sumSELL'] =  number_format($sumSELL, 8, '.', '');
        $showOpenSymbol[$value['symbol']]['sumtaker'] = number_format($sumtaker, 8, '.', ''); 
        $showOpenSymbol[$value['symbol']]['summaker'] = number_format($summaker, 8, '.', ''); 
        $showOpenSymbol[$value['symbol']]['margin_sum'] = number_format($margin_sum, 8, '.', '');
        $showOpenSymbol[$value['symbol']]['margin_sum_USD'] = number_format($margin_sum_USD, 2, '.', '');
        $showOpenSymbol[$value['symbol']]['margin_p'] = number_format($margin_p, 2, '.', '');
        $showOpenSymbol[$value['symbol']]['max_p'] = number_format($OpenSymbol[$value['symbol']]['max_p'], 2, '.', '');
        $showOpenSymbol[$value['symbol']]['change_p'] = number_format($change_p, 2, '.', '');
        $showOpenSymbol[$value['symbol']]['TRADE'] = '';
        // echo 'margin_sum: ', $margin_sum, 'margin_p: ', $margin_p, '  change_p: ', $change_p, "<br/>";

    }
       


        //Stop Loss      
        if(-1== bccomp((string)$margin_p, (string)$lossМargin_p, 8) &&  -1== bccomp((string)$value['bidPrice'], (string)$value['lastPrice'], 8) && !in_array($symbolInfo[0]['baseAsset'], $positionlong)){
        // echo $value['symbol'], "Stop Loss", 'margin_p:', $margin_p, "<br/>";
            //масив параметров для продажи
            $ParamsSELL = array('symbol'=>$value['symbol'], 
                        'side' => 'SELL', 
                        'type' => 'MARKET', 
                        'quantity' => $quantitySELL,
                        'timeInForce' => 'IOC', 
                        'price' => $value['bidPrice']);   
           
            // Создаем ордер на продажу по рыночным ценам
             if ($orderSELL_SL == '1') {
                $showOpenSymbol[$value['symbol']]['TRADE'] = "Stop Loss";

                // $Bin->show($ParamsSELL);
                if ($order = $Bin->orderNEW($ParamsSELL)) {
                    // $Bin->show($order);
                    if ($order['status']=='FILLED'||$order['status']=='EXPIRED') {
                        $order['asset']=$symbolInfo[0]['baseAsset'];
                        $order['base']=$symbolInfo[0]['quoteAsset'];

                        $order['BUYSymbol']=$OpenSymbol[$value['symbol']]['symbol'];
                        $order['BUYTime']=$OpenSymbol[$value['symbol']]['transactTime'];
                        $order['BUYPrice']=$BuyPrice;                        
                        

                        $order['bidPrice']=$value['bidPrice'];
                        $order['orderPrice']=$order['cummulativeQuoteQty']/$order['executedQty'];

                        $order['BUYsum'] = $order['BUYPrice']*$order['executedQty'];
                        $order['orderSum'] = $order['cummulativeQuoteQty'];

                        $order['summaker'] = ($order['cummulativeQuoteQty'] * $tradeFeeKom[$value['symbol']]['maker']);
                        $order['commission'] = array_sum(array_column($order['fills'], 'commission'));

                        $order['marginSM']=$order['cummulativeQuoteQty'] - $order['BUYsum'] -$order['summaker'];
                        // $order['margin']=$order['cummulativeQuoteQty'] - $order['BUYsum'] -$order['commission'];
                        

                        $order['marginSM_USD']= $order['marginSM'] * $kurs['kursUSD'];
                        // $order['marginUSD']= $order['margin'] * $kurs['kursUSD'];
                        $order['marginSM_BTC']= $order['marginSM'] * $kurs['kursBTC'];
                        // $order['marginBTC']= $order['margin'] * $kurs['kursBTC'];
                        $order['kurs']= $kurs;
                        $ArhivorderSELL[] = $order;
                        $Bin->saveFile($ArhivorderSELL, $fileArhivorderSELL);
                    }
                }
            }  
        }
        //Take profit   
        if (1== bccomp((string)$margin_p, (string)$TakeProfit_p, 8) && -1== bccomp((string)$change_p, (string)$declinem_p, 8) &&  -1== bccomp((string)$value['bidPrice'], (string)$value['lastPrice'], 8)) {
        // echo $value['symbol'], "Take profit<br/>", 'margin_p:', $margin_p, "<br/>";
            //масив параметров для продажи
            $ParamsSELL = array('symbol'=>$value['symbol'], 
                        'side' => 'SELL', 
                        'type' => 'LIMIT', 
                        'quantity' => $quantitySELL,
                        'timeInForce' => 'IOC', 
                        'price' => $value['bidPrice']); 
            
            // Создаем ордер на продажу
            if ($orderSELL == '1') {
                $showOpenSymbol[$value['symbol']]['TRADE'] = "Take profit";

                // $Bin->show($ParamsSELL);
                if ($order = $Bin->orderNEW($ParamsSELL)) {
                    // $Bin->show($order);
                    if ($order['status']=='FILLED' || $order['status']=='EXPIRED') {
                        $order['asset']=$symbolInfo[0]['baseAsset'];
                        $order['base']=$symbolInfo[0]['quoteAsset'];

                        $order['BUYSymbol']=$OpenSymbol[$value['symbol']]['symbol'];
                        $order['BUYTime']=$OpenSymbol[$value['symbol']]['transactTime'];
                        $order['BUYPrice']=$BuyPrice;                        
                        

                        $order['bidPrice']=$value['bidPrice'];
                        $order['orderPrice']=$order['cummulativeQuoteQty']/$order['executedQty'];

                        $order['BUYsum'] = $order['BUYPrice']*$order['executedQty'];
                        $order['orderSum'] = $order['cummulativeQuoteQty'];

                        $order['summaker'] = ($order['cummulativeQuoteQty'] * $tradeFeeKom[$value['symbol']]['maker']);
                        $order['commission'] = array_sum(array_column($order['fills'], 'commission'));

                        $order['marginSM']=$order['cummulativeQuoteQty'] - $order['BUYsum'] -$order['summaker'];
                        // $order['margin']=$order['cummulativeQuoteQty'] - $order['BUYsum'] -$order['commission'];
                        

                        $order['marginSM_USD']= $order['marginSM'] * $kurs['kursUSD'];
                        // $order['marginUSD']= $order['margin'] * $kurs['kursUSD'];
                        $order['marginSM_BTC']= $order['marginSM'] * $kurs['kursBTC'];
                        // $order['marginBTC']= $order['margin'] * $kurs['kursBTC'];

                        $order['kurs']= $kurs;
                        $ArhivorderSELL[] = $order;
                        $Bin->saveFile($ArhivorderSELL, $fileArhivorderSELL);

                    }
                }
            }
        } 


    }


        //находим процент отклонения цены от минимальной
        $top = $value['askPrice']-$minPrice;
        $topPrice_p = number_format($top/$minPrice*100, 4, '.', '');



    //ПОКУПКА *****************************************

        //Исключаем если текущая цена больше минимальной на controltopPrice_p (topPrice_p больше controltopPrice_p)
        if (1== bccomp((string)$topPrice_p, (string)$controltopPrice_p, 8))  continue;

        //Исключаем если предпоследняя цена не является минимальной 
        if (0!= bccomp((string)$minPrice, (string)$historyPrice[$value['symbol']]['1'], 8))  continue;

        //Исключаем пары с МАЛОЙ ВОЛОНТИЛЬНОСТЮ 
        if (1== bccomp((string)$BUYcontrolChangePrice_p, (string)$ChangePrice_p, 8)) continue; 

        //Исключаем с количеством операций меньше $countTrends за  24 часа 
        if ($value['count'] < $countTrends) continue;

        //Исключаем с процентом изминения цены за 24 часа больше $priceChangePercent
        // if ($value['priceChangePercent'] > $priceChangePercent) continue; 

        // Исключаем пары цена выше среднего 24часа
        if (-1!= bccomp((string)$value['askPrice'], (string)$value['weightedAvgPrice'], 8)) continue;

        // Исключаем пары с ценой меньше рекомендованой более 100 сатошей
        if (-1== bccomp((string)$value['askPrice'], (string)number_format($base[$symbolInfo['0']['quoteAsset']]['minPriceBuy'], 8, '.', ''), 8)) continue;
        
        //Исключаем пары кторые не нужны ЕСТЬ в открытых ордерах
        if (in_array($value['symbol'], array_column($OpenSymbol, 'symbol'))) continue;

        //Исключаем пары кторые не нужны ЕСТЬ НА БАЛАНСЕ
        if ($accountBalance[$symbolInfo['0']['baseAsset']]['total_USD'] >= $trade_limit*3) continue;

        //Исключаем пары кторые не могу купить НЕТ ДЕНЕГ
        // if ($accountBalance[$symbolInfo['0']['quoteAsset']]['total_USD'] < $trade_limit) continue;

        // Исключаем пары с неутвержденой базой
        if (!array_key_exists($symbolInfo['0']['quoteAsset'], $base)) continue;          



        // Исключаем пары цена ниже или равна последней 
        if (1!= bccomp((string)$value['askPrice'], (string)$value['lastPrice'], 8)) continue;

        //Исключаем пары которые не прыносят прибыль
        // if ($accountBalance[$symbolInfo['0']['quoteAsset']]['margin']<0) continue;




        //масив параметров для покупки
        $ParamsBUY = array('symbol'=>$value['symbol'], 
                        'side' => 'BUY', 
                        'type' => 'LIMIT', 
                        'quantity' => $Bin->round_min($trade_limit/($value['askPrice']*$kurs['kursUSD']), $symbolInfo['0']['filters'][2]['minQty']), 
                        'timeInForce' => 'IOC', 
                        'price' => $value['askPrice']); 


  
        //ПОКУПКА    
        if ($orderBUY == '1') {
            if ($order = $Bin->orderNEW($ParamsBUY)) {
                // $Bin->show($order);
                $order['kurs'] = $kurs;
                $OpenSymbol[$value['symbol']] = $order;
                $Bin->saveFile($OpenSymbol, $fileOpenSymbol);           
            }
        }

    //Смотрим что планируем покупаем
        // echo "<br/>", $value['symbol'], ' ----%: ', $ChangePrice_p, ' ----count: ', count($historyPrice[$value['symbol']]), ' ----max: ', $maxPrice, ' ----min: ', $minPrice, ' -----ask: ', $value['askPrice'];
        // $Bin->show($historyPrice[$value['symbol']]);

    $t['symbol'] = $value['symbol'];
    $t['asset']=$symbolInfo[0]['baseAsset'];
    $t['base']=$symbolInfo[0]['quoteAsset'];
    $t['total_USD'] = round($accountBalance[$symbolInfo[0]['quoteAsset']]['total_USD'], 2);


    $t['quantity'] = $ParamsBUY['quantity'];
    $t['askQty'] = $value['askQty'];    
    $t['askPrice'] = $ParamsBUY['price'];
    $t['askPriceUSD'] = $ParamsBUY['price']* $kurs['kursUSD'];

    $t['minPrice'] = $minPrice;
    $t['maxPrice'] = $maxPrice;    
    $t['spred'] = $spred; 

    $t['ChangePrice_p'] = $ChangePrice_p;
    $t['countChangePrice'] = count($historyPrice[$value['symbol']]);
    $t['topPrice_p'] = $topPrice_p;




    $t['count_24'] = $value['count'];
    $t['priceChangePercent_24'] = $value['priceChangePercent'];    
   



    $BUY[] = $t;
}
//Сохраняем историю цены
$Bin->saveFile($historyPrice, $filehistoryPrice);
//Сохраняем окрытые сделки
$Bin->saveFile($OpenSymbol, $fileOpenSymbol);

//сортирум и смотрим
usort($accountBalance, function($a, $b) {
    return $b['total_USD'] - $a['total_USD'];
});
$Bin->showArrayTable($accountBalance);

// $Bin->showArrayTable($base);

echo 'За сегодня: <font size="20" color="green" face="Arial">', round(array_sum(array_column($ArhivorderSELL, 'marginSM_USD')),2), ' $</font>  баланс ', round(array_sum(array_column($accountBalance, 'total_USD')),2), ' <br/>';
echo 'За сегодня: <font size="20" color="green" face="Arial">', number_format(array_sum(array_column($ArhivorderSELL, 'marginSM_BTC')), 8, '.', ''), ' ₿</font>  баланс ', round(array_sum(array_column($accountBalance, 'total_BTC')),8), ' <br/>';

echo '<br/>Открытых сделок ',count($OpenSymbol), '<br/>'; 
//сортирум и смотрим
usort($showOpenSymbol, function($a, $b) {
    return $b['margin_p']*100000000 - $a['margin_p']*100000000;
});
$Bin->showArrayTable($showOpenSymbol);

echo "<br/>На покупку ", count($BUY), '<br/>';
$Bin->showArrayTable($BUY);



echo "<br/>История продаж ", count($ArhivorderSELL), '<br/>';
$Bin->showArrayTable(array_reverse($ArhivorderSELL));

$time = microtime(true) - $start;
echo 'Время выполнения скрипта: '.round($time, 4).' сек.<br/><br/><br/>';
exit();
?>